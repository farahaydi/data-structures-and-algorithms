/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stackqueue;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
   @Test
    public void testStackPush()
   {
       LinckedStack lstest=new LinckedStack();
       lstest.push(2);
       lstest.push(4);
       lstest.push(6);
       assertEquals(3,lstest.length);
   }
   @Test
    public void testStackPop()
   {
       LinckedStack lstest=new LinckedStack();
       lstest.push(2);
       lstest.push(4);
       lstest.push(6);
       int removedItem=lstest.pop();
       assertEquals(6,removedItem);
   }
   @Test
    public void testStackPeek()
   {
       LinckedStack lstest=new LinckedStack();
       lstest.push(2);
       lstest.push(4);
       lstest.push(6);
       int peekElement=lstest.peek();
       assertEquals(6,peekElement);
   }
    @Test
    public void testEmptyStack() {
        LinckedStack lstest = new LinckedStack();

        assertThrows(IllegalArgumentException.class, () -> {lstest.pop();});
    }
   @Test
    public void testQueueEnqueue()
   {
       LinkedQueue lntest =new LinkedQueue();
       lntest.enqueue(1);
       lntest.enqueue(3);
       lntest.enqueue(5);
       assertEquals(3,lntest.length);
   }
   @Test
    public void testQueueDequeue()
   {
       LinkedQueue lntest =new LinkedQueue();
       lntest.enqueue(1);
       lntest.enqueue(3);
       lntest.enqueue(5);
       int removedElement=lntest.dequeue();
       assertEquals(1,removedElement);
   }
   @Test
    public void testQueuePeek()
   {
       LinkedQueue lntest =new LinkedQueue();
       lntest.enqueue(1);
       lntest.enqueue(3);
       lntest.enqueue(5);
       int peekElement=lntest.peek();
       assertEquals(1,peekElement);
   }
   @Test
    public void testEmptyQueue()
   {
       LinkedQueue lntest =new LinkedQueue();
      assertThrows(IllegalArgumentException.class,()->{lntest.dequeue();});
   }

   @Test
    public void testPseudoQueueEnqueue()
   {
       PseudoQueue pseudoQueue = new PseudoQueue();
       pseudoQueue.enqueue(1);
       pseudoQueue.enqueue(2);
       pseudoQueue.enqueue(3);
       assertEquals(3,pseudoQueue.length);
   }
   @Test
    public void testPseudoQueueDequeue()
   {
       PseudoQueue pseudoQueue = new PseudoQueue();
       pseudoQueue.enqueue(1);
       pseudoQueue.enqueue(2);
       pseudoQueue.enqueue(3);
       assertEquals(3,pseudoQueue.dequeue());
   }
   @Test
    public void testPseudoQueueEmptyDequeue()
   {
       PseudoQueue pseudoQueue = new PseudoQueue();
       assertThrows(IllegalArgumentException.class,()->{pseudoQueue.dequeue();});
   }

    @Test
    void testEnqueueAndDequeue() {
        AnimalShelter shelter = new AnimalShelter();

        shelter.enqueue(new Animal("dog", "Buddy"));
        shelter.enqueue(new Animal("cat", "Whiskers"));
        shelter.enqueue(new Animal("dog", "Rex"));
        shelter.enqueue(new Animal("cat", "Mittens"));
        Animal adoptedDog = shelter.dequeue("dog");
        assertNotNull(adoptedDog);
        assertEquals("Buddy", adoptedDog.getName());

        Animal adoptedCat = shelter.dequeue("cat");
        assertNotNull(adoptedCat);
        assertEquals("Whiskers", adoptedCat.getName());

        Animal invalidAnimal = shelter.dequeue("rabbit");
        assertNull(invalidAnimal);
    }
    @Test
    void testEmptyShelter() {
        AnimalShelter shelter = new AnimalShelter();

        Animal adoptedDog = shelter.dequeue("dog");
        assertNull(adoptedDog);

        Animal adoptedCat = shelter.dequeue("cat");
        assertNull(adoptedCat);
    }
}
